#include<stdio.h>
#include<stdlib.h>
struct node{
    int data;
    struct node *left, *right;
};
typedef struct node node;

node* buildTree(int val, node* root) {
    node* newNode = (node*) malloc(sizeof(node));
    newNode->data = val;
    // base case 
    if(root == NULL) {
        root = newNode;
        return root;
    }
    
    if(val < root->data) root->left = buildTree(val, root->left);
    else root->right = buildTree(val, root->right);
    return root;
}

void inorderTraversal(node* root) {
    if(root == NULL) return;
    
    inorderTraversal(root->left);
    printf("%d ",root->data);
    inorderTraversal(root->right);
}

void preorderTraversal(node* root) {
    if(root == NULL) return;

     printf("%d ",root->data);
    preorderTraversal(root->left);
    preorderTraversal(root->right);
}

void postorderTraversal(node* root) {
    if(root == NULL) return;

    postorderTraversal(root->left);
    postorderTraversal(root->right);
     printf("%d ",root->data);
}

node* minVal(node* root) {
    while(root->left != NULL) {
        root = root->left;
    }
    return root;
}

node* deleteNode(node* root, int val) {
    if(root == NULL) return root;
    
    if(root->data == val) {
        // zero child
        if(!root->left && !root->right) {
            free(root);
            return NULL;
        }
    
        // 1 child left
        if(root->left && !root->right) {
            node* temp = root->left;
            free(root);
            return temp;
        }
        
        // 1 right child
        if(root->right && !root->left) {
            node* temp = root->right;
            free(root);
            return temp;
        }
        
        // for two child
        if(root->left && root->right) {
            int mini = minVal(root->right)->data;
            root->data = mini;
            root->right = deleteNode(root->right, mini);
            return root;
        }
    }
    
    else if(root->data > val) {
        root->left =  deleteNode(root->left, val);
        return root;
    }
    
    else {
        root->right = deleteNode(root->right, val);
        return root;
    }
    return root;
}

void valuesBST(node* root) {
    if(root == NULL) {
        printf("\nTree is empty \n");
        return;
    }
    node* temp = root;
    
    while(temp->left != NULL) {
        temp = temp->left;
    }
    printf("Minimum value of tree is %d \n",temp->data);
    temp = root;
    while(temp->right) {
        temp = temp->right;
    }
    printf("Maximum value of tree is %d \n",temp->data);
}

int main() {
    node* root = NULL;
    root = buildTree(5, root);
    root = buildTree(15, root);
    root = buildTree(10, root);
    root = buildTree(2, root);
    root = buildTree(25, root);
    root = buildTree(37, root);
    valuesBST(root);
        printf("Inorder traveral is : \n");
    inorderTraversal(root);
        printf("\nPreorder Traversal is : \n");
    preorderTraversal(root);
        printf("\nPostorder Traversal is : \n");
    postorderTraversal(root);
    root = deleteNode(root, 10);
    printf("\nTree after deletion is : \n");
    inorderTraversal(root);
}
